; =====================================================================
;  Supervisor config for AI-Trader (no-Docker deployment)
;  Сохранить как: deploy/supervisord.conf
;  Запуск:
;     sudo supervisorctl reread && sudo supervisorctl update
;     sudo supervisorctl status
; =====================================================================

[supervisord]
logfile=/var/log/ai_trader/supervisord.log
logfile_maxbytes=50MB
logfile_backups=5
loglevel=info
pidfile=/var/run/ai_trader-supervisord.pid
nodaemon=false
minfds=1024
minprocs=200
user=root                ; сам supervisord может идти от root, а программы — от appuser

; Локальный unix-сокет для supervisorctl
[unix_http_server]
file=/var/run/ai_trader-supervisor.sock
chmod=0770
chown=appuser:appuser

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/ai_trader-supervisor.sock

; =====================================================================
; Глобальные переменные окружения (при необходимости)
; Здесь можно зашить дефолты — ИЛИ использовать .env в командной строке.
; =====================================================================
;[environment]
;ENV=prod

; =====================================================================
; Общие настройки логов: создайте директорию логов заранее
;   sudo mkdir -p /var/log/ai_trader && sudo chown -R appuser:appuser /var/log/ai_trader
; =====================================================================

; =====================================================================
; ПЕРЕМЕННЫЕ ПУТЕЙ (настрой)
; =====================================================================
; Предполагаем структура:
;   /opt/ai_trader/           — корень проекта (git working dir)
;   /opt/ai_trader/.venv/     — venv (python3 -m venv .venv && .venv/bin/pip install -r requirements.txt)
;   /opt/ai_trader/configs/.env — ENV переменные приложения
;
; Если пути другие — поправь directory/command ниже.
; =====================================================================

; =====================================================================
; 1) FastAPI (uvicorn) — основной API сервис
; =====================================================================
[program:ai_trader_api]
directory=/opt/ai_trader
user=appuser
; Подгружаем .env и стартуем uvicorn
command=/bin/bash -lc 'set -a; [ -f configs/.env ] && source configs/.env; exec /opt/ai_trader/.venv/bin/uvicorn src.main:app --host 0.0.0.0 --port ${UVICORN_PORT:-8001} --proxy-headers --forwarded-allow-ips "*"'
autostart=true
autorestart=true
startsecs=5
startretries=3
stopsignal=TERM
stopasgroup=true
killasgroup=true
stdout_logfile=/var/log/ai_trader/api.stdout.log
stderr_logfile=/var/log/ai_trader/api.stderr.log
stdout_logfile_maxbytes=20MB
stderr_logfile_maxbytes=20MB
stdout_logfile_backups=5
stderr_logfile_backups=5
; Приоритет повыше, чтобы API поднялся раньше остальных
priority=10
; Таймаут graceful-shutdown
stopwaitsecs=25
; Окружение на уровне программы (опционально, сверх .env)
environment=APP_ENV="prod"

; =====================================================================
; 2) WS-стример / роутер — консолидирует котировки (Binance WS/REST backfill)
;    Ожидается модуль: ai_trader.services.stream_router (вы его добавляли ранее)
;    Параметры (пример): --symbols BTCUSDT,ETHUSDT --tf 1m
;    Чтобы не хардкодить, читаем из .env переменные STREAM_SYMBOLS/STREAM_TF.
; =====================================================================
[program:ai_trader_ws_router]
directory=/opt/ai_trader
user=appuser
command=/bin/bash -lc 'set -a; [ -f configs/.env ] && source configs/.env; \
  SYMS=${STREAM_SYMBOLS:-BTCUSDT,ETHUSDT}; TF=${STREAM_TF:-1m}; \
  exec /opt/ai_trader/.venv/bin/python -m ai_trader.services.stream_router --symbols "$SYMS" --tf "$TF"'
autostart=true
autorestart=true
startsecs=5
startretries=5
stopsignal=TERM
stopasgroup=true
killasgroup=true
stdout_logfile=/var/log/ai_trader/ws_router.stdout.log
stderr_logfile=/var/log/ai_trader/ws_router.stderr.log
stdout_logfile_maxbytes=20MB
stderr_logfile_maxbytes=20MB
stdout_logfile_backups=5
stderr_logfile_backups=5
priority=20
; Перезапуск с бэкоффом, если часто падает
exitcodes=0,2
; Доп.пауза между рестартами
restartsecs=3

; =====================================================================
; 3) Планировщик/воркер стратегий (опционально)
;    Если у вас есть фоновые задачи (например, периодический backfill, алерты),
;    можно запустить отдельный модуль. Ниже — пример «пустышки».
;    Замените ai_trader.services.scheduler на реальный модуль, если есть.
; =====================================================================
[program:ai_trader_scheduler]
directory=/opt/ai_trader
user=appuser
command=/bin/bash -lc 'set -a; [ -f configs/.env ] && source configs/.env; \
  exec /opt/ai_trader/.venv/bin/python -m ai_trader.services.scheduler'
autostart=false              ; включите на true, когда модуль готов
autorestart=true
startsecs=5
startretries=3
stopsignal=TERM
stopasgroup=true
killasgroup=true
stdout_logfile=/var/log/ai_trader/scheduler.stdout.log
stderr_logfile=/var/log/ai_trader/scheduler.stderr.log
stdout_logfile_maxbytes=10MB
stderr_logfile_maxbytes=10MB
stdout_logfile_backups=3
stderr_logfile_backups=3
priority=30

; =====================================================================
; 4) Группа для удобного управления
;    (можно старт/стоп всей пачки разом: supervisorctl start ai_trader:*)
; =====================================================================
[group:ai_trader]
programs=ai_trader_api,ai_trader_ws_router,ai_trader_scheduler

; =====================================================================
; 5) Event listener (необязательно): авто-ротация логов по сигналу
;    Можно посылать: supervisorctl signal SIGUSR2 ai_trader_api
;    Обычно хватает встроенной ротации по maxbytes/backups, поэтому off.
; =====================================================================
;[eventlistener:logrotate]
;command=/bin/true
;events=PROCESS_STATE_EXITED,PROCESS_STATE_FATAL,PROCESS_STATE_BACKOFF

; =====================================================================
; Подсказки по системе:
;  1) Создать пользователя и каталоги:
;     sudo useradd -r -s /usr/sbin/nologin appuser
;     sudo mkdir -p /var/log/ai_trader && sudo chown -R appuser:appuser /var/log/ai_trader
;     sudo mkdir -p /opt/ai_trader && sudo chown -R appuser:appuser /opt/ai_trader
;
;  2) Установка:
;     python3 -m venv /opt/ai_trader/.venv
;     source /opt/ai_trader/.venv/bin/activate
;     pip install -r /opt/ai_trader/requirements.txt
;
;  3) Сервис systemd для supervisord (пример):
;     /etc/systemd/system/ai_trader-supervisord.service:
;       [Unit]
;       Description=Supervisor for AI-Trader
;       After=network.target
;
;       [Service]
;       ExecStart=/usr/bin/supervisord -c /opt/ai_trader/deploy/supervisord.conf
;       ExecStop=/usr/bin/supervisorctl -c /opt/ai_trader/deploy/supervisord.conf shutdown
;       Restart=always
;       User=root
;       LimitNOFILE=65536
;
;       [Install]
;       WantedBy=multi-user.target
;
;     Затем:
;       sudo systemctl daemon-reload
;       sudo systemctl enable --now ai_trader-supervisord
;
;  4) ENV:
;     Храни configs/.env (BINANCE_API_KEY, BINANCE_API_SECRET, FEATURE_* флаги и т.д.)
;     Пример ключей для stream_router:
;        STREAM_SYMBOLS=BTCUSDT,ETHUSDT
;        STREAM_TF=1m
; =====================================================================
