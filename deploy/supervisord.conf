; =====================================================================
;  Supervisor config for AI-Trader (no-Docker deployment)
;  Path: deploy/supervisord.conf
;  Usage:
;     sudo supervisorctl -c /opt/ai_trader/deploy/supervisord.conf reread
;     sudo supervisorctl -c /opt/ai_trader/deploy/supervisord.conf update
;     sudo supervisorctl -c /opt/ai_trader/deploy/supervisord.conf status
; =====================================================================

[supervisord]
; Основные логи Supervisor
logfile=/var/log/ai_trader/supervisord.log
logfile_maxbytes=50MB
logfile_backups=5
loglevel=info
pidfile=/var/run/ai_trader-supervisord.pid
nodaemon=false
minfds=4096
minprocs=200
; Можно задать глобальные переменные для дочерних программ (необязательно)
; environment=APP_ENV="prod",PYTHONUNBUFFERED="1",LANG="C.UTF-8",LC_ALL="C.UTF-8"

; Локальный unix-сокет для supervisorctl (без TCP-интерфейса)
[unix_http_server]
file=/var/run/ai_trader-supervisor.sock
chmod=0770
chown=appuser:appuser

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/ai_trader-supervisor.sock

; --- При необходимости TCP-доступ к веб-панели (НЕ рекомендуется, оставлено закомментированным) ---
; [inet_http_server]
; port=127.0.0.1:9001
; username=someuser
; password=somepass

; =====================================================================
; Подготовка каталогов (вручную один раз):
;   sudo useradd -r -s /usr/sbin/nologin appuser
;   sudo mkdir -p /var/log/ai_trader && sudo chown -R appuser:appuser /var/log/ai_trader
;   sudo mkdir -p /opt/ai_trader && sudo chown -R appuser:appuser /opt/ai_trader
; =====================================================================

; =====================================================================
; 1) FastAPI (uvicorn) — основной API сервис (порт 8001 по умолчанию)
; =====================================================================
[program:ai_trader_api]
directory=/opt/ai_trader
user=appuser

; Загружаем .env и стартуем uvicorn.
; Включены таймауты для graceful shutdown/keep-alive и пробрасывание заголовков от реверс-прокси.
; Для продуктивной нагрузки можно перейти на gunicorn с UvicornWorker (см. uvicorn.dev/docs).
command=/bin/bash -lc 'set -euo pipefail; \
  SECRETS_ENV=${AI_TRADER_SECRETS_ENV:-/var/run/ai_trader/live_secrets.env}; \
  /opt/ai_trader/.venv/bin/python -m deploy.secret_manager --write-env "$SECRETS_ENV"; \
  set -a; \
  [ -f "$SECRETS_ENV" ] && source "$SECRETS_ENV"; \
  [ -f configs/.env ] && source configs/.env; \
  exec /opt/ai_trader/.venv/bin/uvicorn src.main:app \
    --host 0.0.0.0 --port ${UVICORN_PORT:-8001} \
    --proxy-headers --forwarded-allow-ips "*" \
    --timeout-graceful-shutdown ${UVICORN_GRACEFUL_TIMEOUT:-25} \
    --timeout-keep-alive ${UVICORN_KEEPALIVE:-5}'

autostart=true
autorestart=true            ; перезапуск при любом выходе из RUNNING, см. docs
startsecs=5
startretries=5
stopsignal=TERM             ; uvicorn корректно завершает по SIGTERM
stopwaitsecs=30             ; чуть больше graceful-timeout uvicorn
stopasgroup=true            ; послать сигнал всей группе процессов
killasgroup=true            ; убить всю группу при жёсткой остановке
redirect_stderr=true
stdout_logfile=/var/log/ai_trader/api.stdout.log
stderr_logfile=/var/log/ai_trader/api.stderr.log
stdout_logfile_maxbytes=20MB
stderr_logfile_maxbytes=20MB
stdout_logfile_backups=5
stderr_logfile_backups=5
priority=10
environment=APP_ENV="prod",PYTHONUNBUFFERED="1"

; =====================================================================
; 2) WS-стример / роутер (опционально). Консолидирует котировки (Binance WS/REST backfill).
;    Если модуль отсутствует — временно выключите autostart.
; =====================================================================
[program:ai_trader_ws_router]
directory=/opt/ai_trader
user=appuser
command=/bin/bash -lc 'set -euo pipefail; \
  SECRETS_ENV=${AI_TRADER_SECRETS_ENV:-/var/run/ai_trader/live_secrets.env}; \
  /opt/ai_trader/.venv/bin/python -m deploy.secret_manager --write-env "$SECRETS_ENV"; \
  set -a; \
  [ -f "$SECRETS_ENV" ] && source "$SECRETS_ENV"; \
  [ -f configs/.env ] && source configs/.env; \
  SYMS=${STREAM_SYMBOLS:-BTCUSDT,ETHUSDT}; TF=${STREAM_TF:-1m}; \
  exec /opt/ai_trader/.venv/bin/python -m ai_trader.services.stream_router --symbols "$SYMS" --tf "$TF"'
autostart=true
autorestart=true
startsecs=5
startretries=5
stopsignal=TERM
stopasgroup=true
killasgroup=true
redirect_stderr=true
stdout_logfile=/var/log/ai_trader/ws_router.stdout.log
stderr_logfile=/var/log/ai_trader/ws_router.stderr.log
stdout_logfile_maxbytes=20MB
stderr_logfile_maxbytes=20MB
stdout_logfile_backups=5
stderr_logfile_backups=5
priority=20
; Дополнительная пауза между рестартами для снижения флаппинга
restartsecs=3

; =====================================================================
; 3) Планировщик/воркер стратегий (пример-заглушка, включайте при наличии модуля)
; =====================================================================
[program:ai_trader_scheduler]
directory=/opt/ai_trader
user=appuser
command=/bin/bash -lc 'set -euo pipefail; \
  SECRETS_ENV=${AI_TRADER_SECRETS_ENV:-/var/run/ai_trader/live_secrets.env}; \
  /opt/ai_trader/.venv/bin/python -m deploy.secret_manager --write-env "$SECRETS_ENV"; \
  set -a; \
  [ -f "$SECRETS_ENV" ] && source "$SECRETS_ENV"; \
  [ -f configs/.env ] && source configs/.env; \
  exec /opt/ai_trader/.venv/bin/python -m ai_trader.services.scheduler'
autostart=false
autorestart=true
startsecs=5
startretries=3
stopsignal=TERM
stopasgroup=true
killasgroup=true
redirect_stderr=true
stdout_logfile=/var/log/ai_trader/scheduler.stdout.log
stderr_logfile=/var/log/ai_trader/scheduler.stderr.log
stdout_logfile_maxbytes=10MB
stderr_logfile_maxbytes=10MB
stdout_logfile_backups=3
stderr_logfile_backups=3
priority=30

; =====================================================================
; 4) Группа для удобного управления:
;    supervisorctl -c deploy/supervisord.conf start ai_trader:
; =====================================================================
[group:ai_trader]
programs=ai_trader_api,ai_trader_ws_router,ai_trader_scheduler

; =====================================================================
; 5) systemd wrapper для самого supervisord
;    /etc/systemd/system/ai_trader-supervisord.service
; =====================================================================
; [Unit]
; Description=Supervisor for AI-Trader
; After=network-online.target
; Wants=network-online.target
;
; [Service]
; ExecStart=/usr/bin/supervisord -c /opt/ai_trader/deploy/supervisord.conf
; ExecStop=/usr/bin/supervisorctl -c /opt/ai_trader/deploy/supervisord.conf shutdown
; Restart=always
; User=root
; LimitNOFILE=65536
;
; [Install]
; WantedBy=multi-user.target
